// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  var sku = 1
  var upc = 1
  const ownerID = accounts[0]
  const originFarmerID = accounts[1]
  const originFarmName = "John Doe"
  const originFarmInformation = "Yarray Valley"
  const originFarmLatitude = "-38.239770"
  const originFarmLongitude = "144.341490"
  var productID = sku + upc
  const productNotes = "Best beans for Espresso"
  const productPrice = web3.utils.toWei('1', "ether")
  const distributorID = accounts[2]
  const retailerID = accounts[3]
  const consumerID = accounts[4]
  const emptyAddress = '0x00000000000000000000000000000000000000'

  const HarvestedState = 0;
  const ProcessedState = 1;
  const PackedState = 2;
  const ForSaleState = 3;
  const SoldState = 4;
  const ShippedState = 5;
  const ReceivedState = 6;
  const PurchasedState = 7;


  ///Available Accounts
  ///==================
  ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
  ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
  ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
  ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
  ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
  ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
  ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
  ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
  ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
  ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

  console.log("ganache-cli accounts used here...")
  console.log("Contract Owner: accounts[0] ", accounts[0])
  console.log("Farmer: accounts[1] ", accounts[1])
  console.log("Distributor: accounts[2] ", accounts[2])
  console.log("Retailer: accounts[3] ", accounts[3])
  console.log("Consumer: accounts[4] ", accounts[4])

  before(async () => {
    const supplyChain = await SupplyChain.deployed()
    await supplyChain.addFarmer(originFarmerID);
    await supplyChain.addDistributor(distributorID);
    await supplyChain.addRetailer(retailerID);
    await supplyChain.addConsumer(consumerID);
  })

  // 1st Test
  it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
    var eventEmitted = false

    // Watch the emitted event Harvested()'
    var event = supplyChain.contract.events.Harvested((err, res) => {
      eventEmitted = true
    })

    // Mark an item as Harvested by calling function harvestItem()
    let result = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assert.equal(resultBufferOne.itemSKU, sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne.itemUPC, upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne.ownerID, originFarmerID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID')
    assert.equal(resultBufferOne.originFarmName, originFarmName, 'Error: Missing or Invalid originFarmName')
    assert.equal(resultBufferOne.originFarmInformation, originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
    assert.equal(resultBufferOne.originFarmLatitude, originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(resultBufferOne.originFarmLongitude, originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    assert.equal(resultBufferTwo.itemState, HarvestedState, 'Error: Invalid item State')
    assert.equal(eventEmitted, true, 'Invalid event emitted')
  })

  // 2nd Test
  it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Watch the emitted event Processed()
    var processedEventEmitted = false
    var event = supplyChain.contract.events.Processed((err, res) => {
      processedEventEmitted = true
    })

    // Mark an item as Processed by calling function processtItem()
    await supplyChain.processItem(upc, { from: originFarmerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

    // Verify the result set
    assert.equal(resultBufferTwo.itemState, ProcessedState, 'Invalid State')
    assert.equal(processedEventEmitted, true, 'Event not emitted')
  })

  // 3rd Test
  it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Watch the emitted event Packed()
    var packedEventEmitted = false
    var event = supplyChain.contract.events.Packed((err, res) => {
      packedEventEmitted = true
    })

    // Mark an item as Packed by calling function packItem()
    await supplyChain.packItem(upc, { from: originFarmerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

    // Verify the result set
    assert.equal(resultBufferTwo.itemState, PackedState, 'Invalid State')
    assert.equal(packedEventEmitted, true, 'Event not emitted')
  })

  // 4th Test
  it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Watch the emitted event ForSale()
    var forSaleEventEmitted = false
    var event = supplyChain.contract.events.ForSale((err, res) => {
      forSaleEventEmitted = true
    })

    // Mark an item as Packed by calling function packItem()
    await supplyChain.sellItem(upc, productPrice, { from: originFarmerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

    // Verify the result set
    assert.equal(resultBufferTwo.productPrice, productPrice, 'Incorrect price')
    assert.equal(resultBufferTwo.itemState, ForSaleState, 'Invalid State')
    assert.equal(forSaleEventEmitted, true, 'Event not emitted')
  })

  // 5th Test
  it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Watch the emitted event Sold()
    var soldEventEmitted = false
    var event = supplyChain.contract.events.Sold((err, res) => {
      soldEventEmitted = true
    })

    // Mark an item as Sold by calling function buyItem()
    await supplyChain.buyItem(upc, { from: distributorID, value: productPrice })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assert.equal(resultBufferOne.ownerID, distributorID, 'Invalid ownerID')
    assert.equal(resultBufferTwo.itemState, SoldState, 'Invalid item State')
    assert.equal(resultBufferTwo.distributorID, distributorID, 'Invalid item State')
    assert.equal(soldEventEmitted, true, 'Event not emitted')
  })

  // 6th Test
  it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Watch the emitted event Shipped()
    var shippedEventEmitted = false
    var event = supplyChain.contract.events.Shipped((err, res) => {
      shippedEventEmitted = true
    })

    // Mark an item as Shipped by calling function shipItem()
    await supplyChain.shipItem(upc, { from: distributorID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assert.equal(resultBufferTwo.itemState, ShippedState, 'Invalid item State')
    assert.equal(shippedEventEmitted, true, 'Event not emitted')
  })

  // 7th Test
  it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Watch the emitted event Received()
    var receivedEventEmitted = false
    var event = supplyChain.contract.events.Received((err, res) => {
      receivedEventEmitted = true
    })

    // Mark an item as received by calling function receiveItem()
    await supplyChain.receiveItem(upc, { from: retailerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assert.equal(resultBufferOne.ownerID, retailerID, 'Invalid ownerID')
    assert.equal(resultBufferTwo.itemState, ReceivedState, 'Invalid item State')
    assert.equal(resultBufferTwo.retailerID, retailerID, 'Invalid retailer ID')
    assert.equal(receivedEventEmitted, true, 'Event not emitted')
  })

  // 8th Test
  it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Watch the emitted event Purchased()
    var purchasedEventEmitted = false
    var event = supplyChain.contract.events.Purchased((err, res) => {
      purchasedEventEmitted = true
    })

    // Mark an item as purchase by calling function purchaseItem()
    await supplyChain.purchaseItem(upc, { from: consumerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assert.equal(resultBufferOne.ownerID, consumerID, 'Invalid ownerID')
    assert.equal(resultBufferTwo.itemState, PurchasedState, 'Invalid item State')
    assert.equal(resultBufferTwo.consumerID, consumerID, 'Invalid consumerID')
    assert.equal(purchasedEventEmitted, true, 'Event not emitted')
  })

  // 9th Test
  it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne(upc)

    // Verify the result set
    assert.equal(resultBufferOne.itemSKU, sku, 'Invalid item SKU')
    assert.equal(resultBufferOne.itemUPC, upc, 'Invalid item UPC')
    assert.equal(resultBufferOne.ownerID, consumerID, 'Invalid ownerID')
    assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Invalid originFarmerID')
    assert.equal(resultBufferOne.originFarmName, originFarmName, 'Invalid originFarmName')
    assert.equal(resultBufferOne.originFarmInformation, originFarmInformation, 'Invalid originFarmInformation')
    assert.equal(resultBufferOne.originFarmLatitude, originFarmLatitude, 'Invalid originFarmLatitude')
    assert.equal(resultBufferOne.originFarmLongitude, originFarmLongitude, 'Invalid originFarmLongitude')
  })

  // 10th Test
  it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

    // Verify the result set:
    assert.equal(resultBufferTwo.itemSKU, sku, 'Invalid item SKU')
    assert.equal(resultBufferTwo.itemUPC, upc, 'Invalid item UPC')
    assert.equal(resultBufferTwo.productID, sku + upc, 'Invalid ProductID')
    assert.equal(resultBufferTwo.productNotes, productNotes, 'Invalid productNotes')
    assert.equal(resultBufferTwo.productPrice, productPrice, 'Invalid productPrice')
    assert.equal(resultBufferTwo.itemState, PurchasedState, 'Invalid state')
    assert.equal(resultBufferTwo.distributorID, distributorID, 'Invalid distributorID')
    assert.equal(resultBufferTwo.retailerID, retailerID, 'Invalid retailerID')
    assert.equal(resultBufferTwo.consumerID, consumerID, 'Invalid consumerID')
  })

});

